"""
JSONデータ処理関数（app_with_auth.py互換版）
"""
import os
import json
import pandas as pd
from datetime import datetime
import shutil
from typing import Dict, Optional, Any, List


# JSONファイルのパス
JSON_PATH = "route-subject-text-time.json"
DEFAULT_STUDENT = "デフォルト生徒"


def load_json_data(user_filter=None):
    """JSONデータを読み込み、DataFrameとして返す
    
    Args:
        user_filter: ユーザーフィルター辞書 {'生徒': 'username'} または None（全データ）
    
    Returns:
        pd.DataFrame: 進捗データ
    """
    if not os.path.exists(JSON_PATH):
        # JSONファイルが存在しない場合、初期データを作成
        create_initial_json_data()
    
    try:
        with open(JSON_PATH, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # progress データをDataFrameに変換
        if 'progress' in data and data['progress']:
            df = pd.DataFrame(data['progress'])
        else:
            # 空のDataFrameを作成（必要な列を定義）
            df = pd.DataFrame(columns=[
                'ルートレベル', '科目', '参考書名', '所要時間', '予定', '達成済', 
                '達成割合', '生徒', 'ユーザー名', '校舎'
            ])
        
        # 必要な列が存在することを確認
        required_columns = ['予定', '達成済', '達成割合', '生徒', 'ユーザー名', '校舎']
        for col in required_columns:
            if col not in df.columns:
                if col in ['予定', '達成済']:
                    df[col] = False
                elif col == '生徒':
                    df[col] = DEFAULT_STUDENT
                else:
                    df[col] = ''
        
        # データ型の調整
        if not df.empty:
            df['達成割合'] = df['達成割合'].fillna('').astype(str)
            df.loc[df['達成割合'] == 'nan', '達成割合'] = ''
            df['生徒'] = df['生徒'].fillna(DEFAULT_STUDENT).astype(str)
            df.loc[df['生徒'] == 'nan', '生徒'] = DEFAULT_STUDENT
        
        # ユーザーフィルターを適用
        if user_filter and not df.empty:
            for column, value in user_filter.items():
                if column in df.columns:
                    df = df[df[column] == value]
        
        return df
        
    except (json.JSONDecodeError, FileNotFoundError, KeyError) as e:
        print(f"❌ JSON読み込みエラー: {e}")
        # エラーの場合は空のDataFrameを返す
        return pd.DataFrame(columns=[
            'ルートレベル', '科目', '参考書名', '所要時間', '予定', '達成済', 
            '達成割合', '生徒', 'ユーザー名', '校舎'
        ])


def save_json_data(df):
    """DataFrameをJSONファイルに保存（バックアップ付き）
    
    Args:
        df: 保存するDataFrame
        
    Returns:
        bool: 保存成功フラグ
    """
    try:
        # 保存前にバックアップを作成
        if os.path.exists(JSON_PATH):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = f"route-subject-text-time_backup_{timestamp}.json"
            shutil.copy2(JSON_PATH, backup_path)
            print(f"📄 バックアップ作成: {backup_path}")
        
        # DataFrameの基本チェック
        if df.empty:
            print("⚠️ 警告: 空のDataFrameを保存しようとしています")
            # 空の場合でも基本構造は保存
            data = {
                "metadata": {
                    "created": datetime.now().isoformat(),
                    "last_updated": datetime.now().isoformat(),
                    "version": "2.0"
                },
                "students": [],
                "books": [],
                "progress": []
            }
        else:
            # 既存データを読み込み
            existing_data = {}
            if os.path.exists(JSON_PATH):
                try:
                    with open(JSON_PATH, 'r', encoding='utf-8') as f:
                        existing_data = json.load(f)
                except:
                    existing_data = {}
            
            # DataFrameからJSONデータを構築
            progress_data = df.to_dict('records')
            
            # 生徒リストを抽出
            students = list(df['生徒'].unique()) if '生徒' in df.columns else []
            students = [s for s in students if s and s != 'nan']
            
            # 参考書リストを抽出
            books = []
            if '参考書名' in df.columns and '科目' in df.columns:
                book_groups = df.groupby(['科目', '参考書名']).first()
                for (subject, book_name), row in book_groups.iterrows():
                    books.append({
                        "name": book_name,
                        "subject": subject,
                        "time_hours": row.get('所要時間', 0),
                        "route_level": row.get('ルートレベル', '')
                    })
            
            # JSONデータ構造
            data = {
                "metadata": {
                    "created": existing_data.get("metadata", {}).get("created", datetime.now().isoformat()),
                    "last_updated": datetime.now().isoformat(),
                    "version": "2.0",
                    "record_count": len(progress_data)
                },
                "students": existing_data.get("students", students),
                "books": existing_data.get("books", books),
                "progress": progress_data
            }
        
        print(f"💾 保存開始: {len(data.get('progress', []))} 行のデータ")
        
        # JSONファイルに保存
        with open(JSON_PATH, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        # 保存後の確認
        if os.path.exists(JSON_PATH):
            file_size = os.path.getsize(JSON_PATH)
            print(f"✅ 保存完了: ファイルサイズ {file_size} bytes")
        
        return True
        
    except Exception as e:
        print(f"❌ JSON保存エラー: {e}")
        return False


def add_new_book_data(df, route_level, subject, book_name, time_hours, current_user, user_campus=''):
    """新しい参考書データを追加
    
    Args:
        df: 既存のDataFrame
        route_level: ルートレベル
        subject: 科目
        book_name: 参考書名
        time_hours: 所要時間
        current_user: 現在のユーザー
        user_campus: ユーザーの校舎
        
    Returns:
        pd.DataFrame: 更新されたDataFrame
    """
    new_data = {
        'ルートレベル': route_level,
        '科目': subject,
        '参考書名': book_name,
        '所要時間': time_hours,
        '予定': False,
        '達成済': False,
        '達成割合': '',
        '生徒': current_user,
        'ユーザー名': current_user,
        '校舎': user_campus
    }
    
    # 新しい行をDataFrameに追加
    new_df = pd.concat([df, pd.DataFrame([new_data])], ignore_index=True)
    return new_df


def update_progress_data(df, index, column, value):
    """進捗データを更新
    
    Args:
        df: DataFrameオブジェクト
        index: 更新する行のインデックス
        column: 更新する列名
        value: 新しい値
        
    Returns:
        pd.DataFrame: 更新されたDataFrame
    """
    if 0 <= index < len(df):
        df.iloc[index, df.columns.get_loc(column)] = value
        
        # 達成済みを更新した場合、達成割合も自動更新
        if column == '達成済' and value:
            df.iloc[index, df.columns.get_loc('達成割合')] = '100%'
        elif column == '達成済' and not value:
            df.iloc[index, df.columns.get_loc('達成割合')] = ''
    
    return df


def delete_book_data(df, index):
    """参考書データを削除
    
    Args:
        df: DataFrameオブジェクト
        index: 削除する行のインデックス
        
    Returns:
        pd.DataFrame: 削除後のDataFrame
    """
    if 0 <= index < len(df):
        df = df.drop(index=index).reset_index(drop=True)
    
    return df


def initialize_user_data(username, campus=''):
    """新規ユーザーのデータを初期化
    
    Args:
        username: ユーザー名
        campus: 校舎名
    """
    df = load_json_data()
    
    # ユーザーの既存データをチェック
    user_data = df[df['生徒'] == username] if not df.empty else pd.DataFrame()
    
    if user_data.empty:
        print(f"👤 新規ユーザー「{username}」の初期データを作成します")
        
        # サンプルデータを追加
        sample_books = [
            {'ルートレベル': '基礎', '科目': '数学', '参考書名': '数学I・A基礎問題精講', '所要時間': 80},
            {'ルートレベル': '基礎', '科目': '英語', '参考書名': 'システム英単語', '所要時間': 60},
            {'ルートレベル': '基礎', '科目': '国語', '参考書名': '現代文読解力の開発講座', '所要時間': 40}
        ]
        
        for book in sample_books:
            df = add_new_book_data(
                df, 
                book['ルートレベル'], 
                book['科目'], 
                book['参考書名'], 
                book['所要時間'], 
                username, 
                campus
            )
        
        # 保存
        save_json_data(df)
        print(f"✅ ユーザー「{username}」の初期データを作成しました")


def create_initial_json_data():
    """初期JSONデータを作成"""
    initial_data = {
        "metadata": {
            "created": datetime.now().isoformat(),
            "last_updated": datetime.now().isoformat(),
            "version": "2.0",
            "description": "学習進捗管理システム - JSONデータ"
        },
        "students": [DEFAULT_STUDENT],
        "books": [
            {
                "name": "数学I・A基礎問題精講",
                "subject": "数学",
                "time_hours": 80,
                "route_level": "基礎"
            },
            {
                "name": "システム英単語",
                "subject": "英語", 
                "time_hours": 60,
                "route_level": "基礎"
            },
            {
                "name": "現代文読解力の開発講座",
                "subject": "国語",
                "time_hours": 40,
                "route_level": "基礎"
            }
        ],
        "progress": [
            {
                "ルートレベル": "基礎",
                "科目": "数学",
                "参考書名": "数学I・A基礎問題精講",
                "所要時間": 80,
                "予定": True,
                "達成済": False,
                "達成割合": "30%",
                "生徒": DEFAULT_STUDENT,
                "ユーザー名": DEFAULT_STUDENT,
                "校舎": ""
            }
        ]
    }
    
    with open(JSON_PATH, 'w', encoding='utf-8') as f:
        json.dump(initial_data, f, ensure_ascii=False, indent=2)
    
    print(f"📊 初期JSONデータを作成しました: {JSON_PATH}")


def get_user_statistics(username):
    """ユーザーの統計情報を取得
    
    Args:
        username: ユーザー名
        
    Returns:
        dict: 統計情報
    """
    df = load_json_data({'生徒': username})
    
    if df.empty:
        return {
            'total_books': 0,
            'completed_books': 0,
            'in_progress_books': 0,
            'completion_rate': 0.0,
            'subjects': []
        }
    
    total_books = len(df)
    completed_books = len(df[df['達成済'] == True])
    in_progress_books = len(df[df['予定'] == True]) - completed_books
    completion_rate = (completed_books / total_books * 100) if total_books > 0 else 0.0
    subjects = list(df['科目'].unique()) if '科目' in df.columns else []
    
    return {
        'total_books': total_books,
        'completed_books': completed_books,
        'in_progress_books': in_progress_books,
        'completion_rate': round(completion_rate, 1),
        'subjects': subjects
    }


# 互換性のためのエイリアス
load_csv_data = load_json_data
save_csv_data = save_json_data